namespace MutateCSharp
{
  public static class Schemata
  {
    private static bool _initialised;
    private static int _activatedMutantId;
    
    private static void Initialise()
    {
      if (_initialised) return;
      var activatedMutant = Environment.GetEnvironmentVariable("MUTATE_CSHARP_ACTIVATED_MUTANT");
      if (!string.IsNullOrEmpty(activatedMutant)) _activatedMutantId = int.Parse(activatedMutant);
      _initialised = true;
    }
    
    private static bool ActivatedInRange(int lowerBound, int upperBound)
    {
      Initialise();
      return lowerBound <= _activatedMutantId && _activatedMutantId <= upperBound;
    }

    public static bool ReplaceBooleanConstant(int mutantId, bool original)
    {
      if (!ActivatedInRange(mutantId, mutantId + 0)) return original;
      if (_activatedMutantId == mutantId) return !original;
      throw new System.Diagnostics.UnreachableException("Mutant ID out of range");
    }
  }
}

namespace Boolean.TypedAssignment.False
{
  public class Program
  {
    static void Main()
    {
      bool b = MutateCSharp.Schemata.ReplaceBooleanConstant(0, false);
      Console.WriteLine(b);
    }
  }
}